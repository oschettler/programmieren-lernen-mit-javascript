# 2 - Erste Schritte mit Javascript

In diesem Kapitel wollen wir unsere ersten Experimente mit Javascript machen.

## Javascript und HTML

Die Programmiersprache Javascript gehörte nicht von Anfang an zum World Wide Web. Sie wurde vielmehr erst 1995 von Brendan Eich, einem Programmierer beim damaligen Browser-Hersteller Netscape, [entwickelt](http://de.wikipedia.org/wiki/JavaScript). Javascript war anfangs nur zur Ausführung in Browsern gedacht. Heute läuft es aber auch auf Webservern. Es gibt sogar inzwischen kleine Minicomputer, die direkt Javascript-Programme ausführen können ([Espruino](http://www.espruino.com/), [Tessel](https://tessel.io/)).

Bereits von Anfang an jedoch waren Formulare Teil von HTML. Mit Formularen können Web-Seiten Daten entgegennehmen. Hier ist eine Web-Seite mit einem einfachen Formular ([Einfaches Formular](http://jsfiddle.net/olav/Ngvd4/)):

<<[Web-Seite mit einfachem Formular](code/rechner.html)

Der Web-Dienst http://jsfiddle.net/ erlaubt es uns, kleine Beispiele auf dem Computer des Dienstes abzulegen. Du kannst aber das Beispiel auch in einem Text-Editor (Lade dir z.B. [Atom](https://atom.io/) herunter; es ist ein guter und kostenloser Editor) eingeben und als Datei rechner.html auf deinem Compute speichern. Wenn du dann im Finder/Explorer die Datei durch Doppelklick öffnest, zeigt der Browser dir das Formular an:

![Einfaches Formular](images/rechner.png)

Dieses Formular enthält den üblichen Rahmen einer HTML-Seite, darin das Element &lt;form> ... &lt;/form>, darin zwei Eingabe-Elemente und ein Element für das Ergebnis. Elemente in HTML, die sogenannten Tags, werden mit spitzen Klammern eingeschlossen. Der Browser kann sie so vom normalen Text der Web-Seite unterscheiden. Alles, was in spitzen Klammern steht, ist also ein Tag.

Tags können in Paaren (als sog. Block) oder einzeln auftreten: &lt;html> ... &lt;/html>, &lt;form> ... &lt;/form> und &lt;span> ... &lt;/span> sind Blöcke, &lt;input> ist ein Einzelelement. Ein Tag ist immer gleich aufgebaut:

* &lt;
* Name des Tags, z.B. html, form oder input. Es spielt dabei keine Rolle, ob der Tag-Name groß oder klein geschrieben wird. Für den Browser ist &lt;html> dasselbe wie &lt;HTML>.
* kein, ein oder mehrere Attribute in der Form Name="Wert", z.B. id="zahl1".
* &gt;

Bei Paaren folgt im schließenden Tag auf &lt; ein /. Nur das öffnende Tag enthält Attribute.

Im HTML gibt es eine ganze Reihe von nützlichen Tags. Hier sind die Wichtigsten:

| Tag         | Nutzen               | Beispiel                                                 |
|-------------|----------------------|----------------------------------------------------------|
| &lt;h1>     | Große Überschrift    | &lt;h1>Seitentitel&lt;/h1>                               |
| &lt;h2>     | Mittlere Überschrift | &lt;h2>Erster Abschnitt&lt;/h2>                          |
| &lt;h3>     | Kleine Überschrift   | &lt;h3>Artikel Eins&lt;/h3>                              |
| &lt;p>      | Absatz ("Paragraph") | &lt;p>Dieses Formular ...&lt;/p>                         |
| &lt;ul>     | Liste                | &lt;ul>&lt;li>heute&lt;/li>&lt;li>morgen&lt;/li>&lt;/ul> |
| &lt;ol>     | Nummerierte Liste    | &lt;ol>&lt;li>eins&lt;/li>&lt;li>zwei&lt;/li>&lt;/ul>    |
| &lt;span>   | Textbereich          | Ergebnis: &lt;span>0&lt;/span>                           |
| &lt;img>    | Bild                 | &lt;img src="images/rechner.png">                        |
| &lt;a>      | Link                 | &lt;a href="http://google.de">Google&lt;/a>              |

[SELFHTML](http://de.selfhtml.org/navigation/html.htm) enthält eine umfassende Zusammenfassung der HTML-Tags. Diese Seite arbeitet gerade an einer [umfassenden Modernisierung](http://wiki.selfhtml.org/) in Form eines Wikis.

Für sich genommen macht unser Formular noch nichts. Klickst du auf den Knopf, passiert nichts. Klassisch benötigte man ein Programm auf dem Webserver, um die Daten aus solch einem Formular entgegenzunehmen und zu verarbeiten.

Dasselbe geht aber auch mit Javascript. Ergänze unsere HTML-Seite folgendermaßen:

<<[Web-Seite mit einfachem Formular](code/rechner_js.html)

Wow! Da ist ja einiges dazu gekommen. Der Code des Beispiels liegt bei [jsfiddle](http://jsfiddle.net/olav/ER6C4/). Neben unserem Formular gibt es jetzt noch einen &lt;script> ... &lt;/script>-Block mit meinem Javascript-Programm. Dieses Programm liest die beiden Zahlen aus den Eingabefeldern und gibt ihre Summe aus, wenn du auf den Knopf drückst. Aber langsam ...

## Elemente eines Javascript-Programmes

Javascript-Programme können in einem &lt;script&gt;-Block direkt in eine HTML-Datei geschrieben werden. Normalerweise schreibt man &lt;script&gt;-Blöcke *unter* das übrige HTML. Das ist wichtig, damit der Browser das HTML vom Web-Server bereits geladen hat, wenn er das Javascript-Programm ausführt. Wir wollen ja die Eingabefelder auslesen. Das funktioniert nicht, wenn die Seite noch gar nicht vollständig geladen ist.

Unser kleines Javascript-Programm enthält Anweisungen für den Browser und Erklärungen, die nur für dich als menschlicher Leser gedacht sind. Der Browser ignoriert alle **Kommentare**

* hinter // in einer Zeile und
* die zwischen den Markierungen /* und */ stehen.

Mit solchen Kommentaren kannst du also dir selbst helfen, dein Programm auch in einer Woche noch zu verstehen.

Javascript kann rechnen. Das kannst du direkt ausprobieren, wenn du die Konsole unseres Chrome-Browsers öffnest, entweder über den Menüeintrag Anzeigen / Entwickler / Javascript-Konsole oder über die Tastenkombination ALT-CMD-J:

![Öffnen der Konsole](images/menu_konsole.png)

Gib dann eine einfache Rechenaufgabe ein, z.B. 17 + 19:

![Rechnen in der Console des Browsers](images/rechnen_konsole.png)

Javascript kann sich Zahlen und andere Dinge, z.B. Texte, in **Variablen** merken. Den Inhalt einer Variablen bekommst du, indem du ihren Namen schreibst. Hier speichern wir die Zahl 17 in einer Variable mit Namen *zahl1* und holen diese Zahl anschließend wieder zum Vorschein:

![Eine Variable namens "zahl1"](images/zahl1.png)

Mit Variablen kannst du auch rechnen:

![Mit Variablen rechnen](images/variable_rechnen.png)

Unser Programm definiert vier Variable:

* *formular* speichert das HTML-Formular (Zeile 11)
* *zahl1* und *zahl2* speichern die Werte aus den Eingabefeldern (Zeilen 15, 16)
* *ergebnis* speichert den Textbereich für die Ausgabe des Ergebnisses (Zeile 17)

Man kann also tatsächlich nicht nur einfache Zahlen oder Texte in Variablen speichern, sondern auch HTML-Elemente. Dazu musst du ihnen einen Namen geben. Das Formular hat z.B. den Namen *aufgabe*:

<<[Formular namens "aufgabe"](code/formular_aufgabe.html)

Der Name wird bei einem Attribut *id* angegeben. Ein ID-Name darf in einem HTML-Dokument nur ein einziges Mal vorkommen. Er dient zur *Identifikation* des Elementes. Aus diesem Grund ist es möglich, das Formular über den Aufruf von der Funktion *getElementById()* zu holen und in eine Variable zu schreiben:

<<[Holen des Elementes mit ID "aufgabe" (das Formular)](code/getelementbyid.html)

Auch die beiden Eingabeelemente `&lt;input id="zahl1">`, `&lt;input id="zahl2">` und der Textbereich für das Ergebnis `&lt;span id="ergebnis"></span>` werden auf diese Weise Variablen zugewiesen.

## Ereignisse

Wie aber wird gesteuert, dass die Berechnung erst bei Drücken des Knopfes erfolgt? Der Knopf ist vom Typ *submit*. Ein solcher Knopf löst beim Drücken das Formular aus, in dem er steckt.

In Javascript-Programmen kannst du auf Aktionen des Nutzers reagieren, indem du auf Ereignisse reagierst. Wird z.B. ein Formular abgeschickt, so wird ein *submit*-Ereignis ausgelöst.

Die Aktionen, die beim Eintreffen eines Ereignisses ausgeführt werden sollen, schreibst du in eine Funktion. Du wirst später noch einiges mehr über Funktionen lernen. Hier reicht es erst einmal zu verstehen, dass eine Funktion eine Reihe von Anweisungen zu einer neuen Anweisung verbindet:

<<[Eine Funktion](code/erste_funktion.html)

Dieser Code besagt, das beim Absenden des Formulars (on submit) die Anweisungen einer Funktion ausgeführt werden sollen. Der Code innerhalb der geschweiften Klammern wird also erst dann aufgerufen, wenn der Knopf gedrückt wird.

Im Beispiel ist das der Code in den Zeilen 12 .. 24. Die ersten Zeilen hatten wir uns schon angeschaut. Hier werden HTML-Elemente an Variable zugewiesen. In Zeile 21 wird die eigentliche Rechenaufgabe gelöst und das Ergebnis in den Ergebnis-Textbereich geschrieben.

Interessant hierbei ist, dass du auf den Wert eines Eingabe-Feldes über `.value` und auf einen Textbereich über `.innerHTML` zugegreifen kannst.

Die beiden `parseInt()` sind notwendig, damit Javascript die Werte aus den Eingabefeldern mit + nicht einfach hintereinander hängt, sondern als Zahlen addiert. Eigentlich liefern Eingabefelder nämlich keine Zahlen, sondern Texte. Wendest du auf zwei Texte + an, so werden sie hintereinander gehängt. Aus "22" + "33" wird also "2233". Erst nach Umwandeln der Texte in Zahlen über den Aufruf von parseInt() macht + die erwartete Addition.

Das `return false` in Zeile 24 sagt dem Formular, dass mit dem Ausführen dieser Anweisungen die Behandlung des Abschickens beendet ist. Fehlt diese Zeile, so wird das Ergebnis direkt wieder gelöscht, weil die Seite nach Abschicken des Formulars neu aufgebaut wird.

An dem Beispiel siehst du auch, dass ein Javascript-Programm aus einzelnen Anweisungen besteht. Anweisungen werden durch ein ; beendet. Manchmal ist es möglich, mehrere Anweisungen in einer zu kombinieren, etwa bei der Auflistung der Variablen mit ihren Anfangswerten hinter var. Die einzelnen Variablen werden dann durch ein Komma getrennt.

## Werte und Ausdrücke

Lass uns noch ein wenig mit Werten herumspielen. Javascript kennt Werte von verschiedenen Typen. In der Browser-Konsole hast du oben zwei Zahlen addiert. Es gibt weitere Arten von Werten in Javascript:

| Typ | Beschreibung | Beispiel |
|-----|--------------|----------|
| ganze Zahl | positive und negative ganze Zahlen ohne Komma | -42, 0, 100 |
| Kommazahlen | wie ganze Zahlen, aber mit Nachkommastellen. Das Komma wird als Punkt geschrieben | -2.0, 0.0, 3.14 |
| Text | Kette von Buchstaben und Zeichen in einfachen oder doppelten Anführungsstrichen. Darf nicht über mehrere Zeilen gehen. Anführungsstriche in der Zeichenkette (englisch: *String*) werden mit einem \ markiert | "Hallo Paul", 'Pauls Schwester "Lena"', "3.14" "\"großer\" Bruder" |
| wahr/falsch | Wahrheitswert | true, false |
| leer | nicht festgelegter Wert | null |
| Feld | Vektor oder Matrix von Werten (englisch: *Array*) in [ und ] | [1, 2, "drei", [3, 2]] |
| Objekt | Sammlung mehrerer benannter Einzelwerte in { und } | { name: "Paul", wohntIn: "Bonn" } |
| Funktion | Sammlung einzelner Code-Anweisungen mit Platzhaltern | function(a, b) { return a+b; } |  

Um Werte und Rechenausdrücke mit Werten zu erforschen, kannst du sie in der Konsole des Browsers ausprobieren. öffne dazu die Konsole in Chrome mit ALT-CMD-J und gib nacheinander folgende Werte ein, jeweils gefolgt von der Eingabetaste:

<<[Werte in der Konsole des Browsers](code/werte.js)

Du siehst also, man kann in Javascript einiges mit Werten anstellen. Neben den Grundrechenarten +, - *, / kennt die Sprache noch viele weitere Operatoren.

### Zuweisung

Das haben wir schon kennengelernt. Links vom Gleichheitszeichen steht eine Variable, rechts ein Wert oder Rechenausdruck. Javascript berechnet zunächst die rechte Seite und weist das Ergebnis dann der Variablen zu. Danach kannst du die Variable an allen Stellen verwenden, wo du auch den Wert verwandt hättest.

### Vergleiche

Vergleiche funktionieren wie Rechnenaufgaben. Das Ergebnis ist dann wahr (true) oder falsch (false).

Beispiele:

<<[Vergleiche](code/vergleiche.js)

### Berechnungen

Die Grundrechenarten haben wir jetzt schon einige Male erwähnt. Javascript kann aber noch mehr.

Beispiele:

<<[Berechnungen](code/berechnungen.js)

## Ablaufkontrolle

Mit dem, was du bisher von Javascript kennst, ist es schon ein ganz ordentlicher Taschenrechner. Richtig nützlich wird ein Programm aber erst, wenn es auf Ereignisse mit Entscheidungen reagieren kann oder wenn es eine Menge von Daten einfach verarbeiten kann. Für diese beiden Aufgaben gibt es in Programmiersprachen spezielle Anweisungen.

Um Entscheidungen zu programmieren, gibt es in Javascript die if- und die switch-Anweisung. Während du mit der if-Anweisung je nach Wahrheitswert entweder den einen oder den anderen Programmzweig durchlaufen kannst, führst du bei der switch-Anweisung abhängig von einem Wert eine ganze Reihe unterschiedlicher Anweisungen aus.

Beispiele:

<<[Entscheidungen](code/entscheidungen.js)

Das `break` in der switch-Anweisung sorgt dafür, das Javascript wirklich nur den jeweiligen Fall bearbeitet und dann die switch-Anweisung beendet. Würde es fehlen und zahl wäre z.B 1, würde zwar zuerst "ein Keks" gesetzt, dann würde Javascript aber zum nächsten case-Zweig "durchfallen" und text auf "viele Kekse" setzen. Ein bisschen komisch, aber so funktioniert es nun einmal.

Für die Verarbeitung von vielen Daten gibt es verschiedene Schleifen in Javascript.

 Beispiele:

<<[Schleifen](code/schleifen.js)

## Eingebaute Funktionen

Neben den Ausdrücken und Anweisungen hat Javascript eine ganze Reihe Funktionen eingebaut. Meist arbeiten Funktionen auf einem oder mehreren Werten von einem bestimmten Typ. Diese Werte heissen *Funktionsparameter* und werden in Klammern hinter den Funktionsnamen geschrieben. Hier sind einige wichtige Beispiele:

| Funktion   | Nutzen                | Typ(en)      | Beispiel           | Ergebnis |
|------------|-----------------------|--------------|--------------------|----------|
| parseInt   | wandelt in Ganzzahl   | Zeichenkette | parseInt("10")     | 10       |
| parseFloat | wandelt in Kommazahl  | Zeichenkette | parseFloat("3.14") | 3.14     |
| Number     | Test auf Zahl         | beliebig     | Number("14")       | false    |
| String     | Test auf Zeichenkette | beliebig     | String(12)         | false    |

Neben diesen Funktionen kennt Javascript noch Eigenschaften und Funktionen, die auf Werten eines bestimmten Typs arbeiten. Anders als die eben gezeigten Funktionen, bei denen die Parameter in Klammern hinter den Funktionsnamen erscheinen, schreibt man die folgenden Funktionen - mit einem Punkt getrennt - hinter den Wert, auf den die Funktion angewandt wird. Weitere Parameter können dann zusätzlich in Klammern hinter den Funktionsnamen geschrieben werden.

Eine Eigenschaft von Wertefeldern ("Arrays") haben wir schon kennengelernt: `feld.length` gibt die Anzahl der Listenelemente an.

Es gibt Funktionen auf Feldern, Wahrheitswerten, Daten, Objekten, Zeichenketten und noch viele weitere Funktionen. Stefan Münzer hat auf seiner Website [SELFHTML](http://de.selfhtml.org/javascript/objekte/index.htm) eine umfangreiche Liste zusammengestellt.

Im Zusammenhang mit Zeichenketten gibt es eine Sache, die ich erklären muss:

## Reguläre Ausdrücke

Beim Vergleich von Zeichenketten ist es manchmal nützlich, wenn man nicht mit einem exakten Text, sondern mit einem Textmuster vergleichen kann. Solche Textmuster nennt man in der Informatik [*reguläre Ausdrücke*](http://de.wikipedia.org/wiki/Regul%C3%A4rer_Ausdruck). Im folgenden Beispiel soll das Adjektiv in jedem der Sätze herausgesucht werden. `console.log()` ist dabei eine nützliche Funktion, um Texte und andere Objekte in der Konsole des Browsers auszugeben. Probiere das Beispiel in der Browser-Konsole oder bei [jsfiddle](http://jsfiddle.net/olav/tsjLa/).

<<[Reguläre Ausdrücke](code/regex.js)

Zuerst wird ein Feld mit Texten angelegt und dieses dann in der Schleife durchlaufen. Jeder Satz wird dann mit der Funktion `match()` mit einem *regulären Ausdruck* verglichen. Reguläre Ausdrücke werden in Javascript zwischen zwei Schrägstriche / geschrieben. Im Beispiel ist der reguläre Ausdruck `/jede\S?/`. Reguläre Ausdrücke können folgende Elemente enthalten:

| Element | Beispiel    | Beschreibung                                                        |
|---------|-------------|---------------------------------------------------------------------|
| 	      | /ich/       | "ich", auch als Teil eines Wortes: "ich", "herrlich", "wichtig"     |
| ^       | /^ich/      | "ich" am Anfang eines Textes                                        |
| $       | /ich$/      | "ich" am Ende eines Textes                                          |
| *       | /ich*/      | keinmal oder beliebig oft: "ic", "ich", "ichh", "ichhhhh"           |
| +       | /ich+/      | ein- oder mehrmals: "ich", "ichhhhh"                                |
| .       | /.ich/      | beliebiges Zeichen                                                  |
| .+      | /.+ich/     | ein oder mehrere beliebige Zeichen                                  |
| \|      | /a\|b/      | Alternative. "a" oder "b"                                           |
| \b      | /\bich\b/   | Wortgrenze. Findet "ich" als einzelnes Wort                         |
| \\B     | /\\Bich|\B/ | keine Wortgrenze. Findet "ich" innerhalb von Worten: "wichtig"      |
| \d      | /\d+/       | eine Ziffer 0 .. 9                                                  |
| \\D     | /\\D+/      | keine Ziffer                                                        |
| \s      | /\s*/       | Weißraum-Zeichen, also Leerzeichen, Tabs und Zeilenwechsel          |
| \\S     | /\\S+/      | einzelnes Zeichen, dass kein Leerraum                               |
| \w      | /\w+/       | ein alphanumerisches Zeichen oder Unterstrich                       |
| \\W     | /\\W/       | ein Zeichen, das nicht alphanumerisch und auch kein Unterstrich ist |
| (...)   | /(ich)/     | "ich". Diese Stellen werden intern gespeichert                      |
| /.../g  | /ich/g      | alle Fundstellen von "ich"                                          |
| /.../i  | /ich/i      | "ich", "Ich", "ICH" ohne Groß-/Kleinschreibung zu beachten          |

Neben `match()` gibt es auch eine Funktion `replace()`, die - basierend auf einem regulären Ausdruck - Ersetzungen in einem Text vornehmen kann. Hier ist ein Beispiel:

 <<[Ersetzen mit regulären Ausdrücken](code/regex_replace.js)

Wie die bisherigen kannst du auch dieses Beispiel in der Browser-Konsole oder bei [jsfiddle](http://jsfiddle.net/olav/CuhE6/) ausprobieren Im Beispiel findet der reguläre Ausdruck `/(rot|grün|blau)(\S*)/` alle Farbadjektive in den Sätzen und ersetzt sie durch das Wort *bunt*. Als Bonus wird noch die Beugung des Adjektives über den geklammerten Ausdruck `(\S*)` berücksichtigt und mit `$2` an *bunt* angehängt. *2* deshalb, weil die zweite Klammer genommen werden soll.
