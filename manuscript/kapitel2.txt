# 2 - Erste Schritte mit Javascript

In diesem Kapitel wollen wir unsere ersten Experimente mit Javascript machen.

## Javascript und HTML

Die Programmiersprache Javascript gehörte nicht von Anfang an zum World Wide Web. Sie wurde vielmehr erst 1995 von Brendan Eich, einem Programmierer beim damaligen Browser-Hersteller Netscape, [entwickelt](http://de.wikipedia.org/wiki/JavaScript). Javascript war anfangs nur zur Ausführung in Browsern gedacht. Heute läuft es aber auch auf Webservern. Es gibt sogar inzwischen kleine Minicomputer, die direkt Javascript-Programme ausführen können ([Espruino](http://www.espruino.com/), [Tessel](https://tessel.io/)).

Bereits von Anfang an jedoch waren Formulare Teil von HTML. Mit Formularen können Web-Seiten Daten entgegennehmen. Hier ist eine Web-Seite mit einem einfachen Formular ([Einfaches Formular](http://jsfiddle.net/olav/Ngvd4/)):

<<[Web-Seite mit einfachem Formular](code/rechner.html)

Der Web-Dienst http://jsfiddle.net/ erlaubt es uns, kleine Beispiele auf dem Computer des Dienstes abzulegen. Du kannst aber das Beispiel auch in einem Text-Editor (Lade dir z.B. [Atom](https://atom.io/) herunter; es ist ein guter und kostenloser Editor) eingeben und als Datei rechner.html auf deinem Compute speichern. Wenn du dann im Finder/Explorer die Datei durch Doppelklick öffnest, zeigt der Browser dir das Formular an:

![Einfaches Formular](images/rechner.png)

Dieses Formular enthält den üblichen Rahmen einer HTML-Seite, darin das Element &lt;form> ... &lt;/form>, darin zwei Eingabe-Elemente und ein Element für das Ergebnis. Elemente in HTML, die sogenannten Tags, werden mit spitzen Klammern eingeschlossen. Der Browser kann sie so vom normalen Text der Web-Seite unterscheiden. Alles, was in spitzen Klammern steht, ist also ein Tag.

Tags können in Paaren (als sog. Block) oder einzeln auftreten: &lt;html> ... &lt;/html>, &lt;form> ... &lt;/form> und &lt;span> ... &lt;/span> sind Blöcke, &lt;input> ist ein Einzelelement. Ein Tag ist immer gleich aufgebaut:

* &lt;
* Name des Tags, z.B. html, form oder input. Es spielt dabei keine Rolle, ob der Tag-Name groß oder klein geschrieben wird. Für den Browser ist &lt;html> dasselbe wie &lt;HTML>.
* kein, ein oder mehrere Attribute in der Form Name="Wert", z.B. id="zahl1".
* &gt;

Bei Paaren folgt im schließenden Tag auf &lt; ein /. Nur das öffnende Tag enthält Attribute.

Im HTML gibt es eine ganze Reihe von nützlichen Tags. Hier sind die Wichtigsten:

| Tag         | Nutzen               | Beispiel                                                 |
|-------------|----------------------|----------------------------------------------------------|
| &lt;h1>     | Große Überschrift    | &lt;h1>Seitentitel&lt;/h1>                               |
| &lt;h2>     | Mittlere Überschrift | &lt;h2>Erster Abschnitt&lt;/h2>                          |
| &lt;h3>     | Kleine Überschrift   | &lt;h3>Artikel Eins&lt;/h3>                              |
| &lt;p>      | Absatz ("Paragraph") | &lt;p>Dieses Formular ...&lt;/p>                         |
| &lt;ul>     | Liste                | &lt;ul>&lt;li>heute&lt;/li>&lt;li>morgen&lt;/li>&lt;/ul> |
| &lt;ol>     | Nummerierte Liste    | &lt;ol>&lt;li>eins&lt;/li>&lt;li>zwei&lt;/li>&lt;/ul>    |
| &lt;span>   | Textbereich          | Ergebnis: &lt;span>0&lt;/span>                           |
| &lt;img>    | Bild                 | &lt;img src="images/rechner.png">                        |
| &lt;a>      | Link                 | &lt;a href="http://google.de">Google&lt;/a>              |

[SELFHTML](http://de.selfhtml.org/navigation/html.htm) enthält eine umfassende Zusammenfassung der HTML-Tags.

Für sich genommen macht unser Formular noch nichts. Klickst du auf den Knopf, passiert nichts. Klassisch benötigte man ein Programm auf dem Webserver, um die Daten aus solch einem Formular entgegenzunehmen und zu verarbeiten.

Dasselbe geht aber auch mit Javascript. Ergänze unsere HTML-Seite folgendermaßen:

<<[Web-Seite mit einfachem Formular](code/rechner_js.html)

Wow! Da ist ja einiges dazu gekommen. Der Code des Beispiels liegt bei [jsfiddle](http://jsfiddle.net/olav/ER6C4/). Neben unserem Formular gibt es jetzt noch einen &lt;script> ... &lt;/script>-Block mit meinem Javascript-Programm. Dieses Programm liest die beiden Zahlen aus den Eingabefeldern und gibt ihre Summe aus, wenn du auf den Knopf drückst. Aber langsam ...

## Elemente eines Javascript-Programmes

Javascript-Programme können in einem &lt;script&gt;-Block direkt in eine HTML-Datei geschrieben werden. Normalerweise schreibt man &lt;script&gt;-Blöcke *unter* das übrige HTML. Das ist wichtig, damit der Browser das HTML vom Web-Server bereits geladen hat, wenn er das Javascript-Programm ausführt. Wir wollen ja die Eingabefelder auslesen. Das funktioniert nicht, wenn die Seite noch gar nicht vollständig geladen ist.

Javascript kann rechnen. Das kannst du direkt ausprobieren, wenn du die Konsole unseres Chrome-Browsers öffnest, entweder über den Menüeintrag Anzeigen / Entwickler / Javascript-Konsole oder über die Tastenkombination ALT-CMD-J:

![Öffnen der Konsole](images/menu_konsole.png)

Gib dann eine einfache Rechenaufgabe ein, z.B. 17 + 19:

![Rechnen in der Console des Browsers](images/rechnen_konsole.png)

Javascript kann sich Zahlen und andere Dinge, z.B. Texte, in Variablen merken. Den Inhalt einer Variablen bekommst du, indem du ihren Namen schreibst. Hier speichern wir die Zahl 17 in einer Variable mit Namen *zahl1* und holen diese Zahl anschließend wieder zum Vorschein:

![Eine Variable namens "zahl1"](images/zahl1.png)

Mit Variablen kannst du auch rechnen:

![Mit Variablen rechnen](images/variable_rechnen.png)

Unser Programm definiert vier Variable:

* *formular* speichert das HTML-Formular
* *zahl1* und *zahl2* speichern die Werte aus den Eingabefeldern
* *ergebnis* speichert den Textbereich für die Ausgabe des Ergebnisses

Man kann also tatsächlich nicht nur einfache Zahlen oder Texte in Variablen speichern, sondern auch HTML-Elemente. Dazu musst du ihnen einen Namen geben. Das Formular hat z.B. den Namen *aufgabe*:

<<[Formular namens "aufgabe"](code/formular_aufgabe.html)

Der Name wird bei einem Attribut *id* angegeben. Ein ID-Name darf in einem HTML-Dokument nur ein einziges Mal vorkommen. Aus diesem Grund ist es möglich, das Formular über den Aufruf von der Funktion *getElementById()* zu holen und in eine Variable zu schreiben:

<<[Holen des Elementes mit ID "aufgabe" (das Formular)](code/getelementbyid.html)

Auch die beiden Eingabeelemente `&lt;input id="zahl1">`, `&lt;input id="zahl2">` und der Textbereich für das Ergebnis `&lt;span id="ergebnis"></span>` werden auf diese Weise Variablen zugewiesen.

## Ereignisse

Wie aber wird gesteuert, dass die Berechnung erst bei Drücken des Knopfes erfolgt? Der Knopf ist vom Typ *submit*. Ein solcher Knopf löst beim Drücken das Formular aus, in dem er steckt.

In Javascript-Programmen kannst du auf Aktionen des Nutzers reagieren, indem du auf Ereignisse reagierst. Wird z.B. ein Formular abgeschickt, so wird ein *submit*-Ereignis ausgelöst.

Die Aktionen, die beim Eintreffen eines Ereignisses ausgeführt werden sollen, schreibst du in eine Funktion. Funktionen sammeln eine Reihe von Anweisungen:

<<[Eine Funktion](code/erste_funktion.html)

Diese Anweisung besagt, das beim Absenden des Formulars (on submit) die Anweisungen einer Funktion ausgeführt werden sollen. Der Code innerhalb der geschweiften Klammern wird also erst dann aufgerufen, wenn der Knopf gedrückt wird.

Im Beispiel ist das der Code in den Zeilen 9 .. 16. Die ersten Zeilen hatten wir uns schon angeschaut. Hier werden HTML-Elemente an Variable zugewiesen. In Zeile 14 wird die eigentliche Rechenaufgabe gelöst und das Ergebnis in den Ergebnis-Textbereich geschrieben.

Interessant hierbei ist, dass du auf den Wert eines Eingabe-Feldes über *.value* und auf einen Textbereich über *.innerHTML* zugegreifen kannst.

Die beiden `parseInt()` sind notwendig, damit Javascript die Werte aus den Eingabefeldern mit + nicht einfach hintereinander hängt, sondern als Zahlen addiert. Eigentlich liefern Eingabefelder nämlich keine Zahlen, sondern Texte. Wendest du auf zwei Texte + an, so werden sie hintereinander gehängt. Aus "22" + "33" wird also "2233". Erst nach Umwandeln der Texte in Zahlen über den Aufruf von parseInt() macht + die erwartete Addition.

Das `return false` in Zeile 16 sagt dem Formular, dass mit dem Ausführen dieser Anweisungen die Behandlung des Abschickens beendet ist. Fehlt diese Zeile, so wird das Ergebnis direkt wieder gelöscht, weil die Seite nach Abschicken des Formulars neu aufgebaut wird.
